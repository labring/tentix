/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as StaffRouteImport } from './routes/staff'
import { Route as NotLoginRouteImport } from './routes/notLogin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StaffDashboardRouteImport } from './routes/staff/dashboard'
import { Route as UserSettingIndexRouteImport } from './routes/user/setting/index'
import { Route as UserNewticketIndexRouteImport } from './routes/user/newticket/index'
import { Route as UserTicketsListRouteImport } from './routes/user/tickets/list'
import { Route as UserTicketsIdRouteImport } from './routes/user/tickets/$id'
import { Route as StaffTicketsListRouteImport } from './routes/staff/tickets/list'
import { Route as StaffTicketsAllRouteImport } from './routes/staff/tickets/all'
import { Route as StaffTicketsIdRouteImport } from './routes/staff/tickets/$id'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const StaffRoute = StaffRouteImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => rootRouteImport,
} as any)
const NotLoginRoute = NotLoginRouteImport.update({
  id: '/notLogin',
  path: '/notLogin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StaffDashboardRoute = StaffDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StaffRoute,
} as any)
const UserSettingIndexRoute = UserSettingIndexRouteImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => UserRoute,
} as any)
const UserNewticketIndexRoute = UserNewticketIndexRouteImport.update({
  id: '/newticket/',
  path: '/newticket/',
  getParentRoute: () => UserRoute,
} as any)
const UserTicketsListRoute = UserTicketsListRouteImport.update({
  id: '/tickets/list',
  path: '/tickets/list',
  getParentRoute: () => UserRoute,
} as any)
const UserTicketsIdRoute = UserTicketsIdRouteImport.update({
  id: '/tickets/$id',
  path: '/tickets/$id',
  getParentRoute: () => UserRoute,
} as any)
const StaffTicketsListRoute = StaffTicketsListRouteImport.update({
  id: '/tickets/list',
  path: '/tickets/list',
  getParentRoute: () => StaffRoute,
} as any)
const StaffTicketsAllRoute = StaffTicketsAllRouteImport.update({
  id: '/tickets/all',
  path: '/tickets/all',
  getParentRoute: () => StaffRoute,
} as any)
const StaffTicketsIdRoute = StaffTicketsIdRouteImport.update({
  id: '/tickets/$id',
  path: '/tickets/$id',
  getParentRoute: () => StaffRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket': typeof UserNewticketIndexRoute
  '/user/setting': typeof UserSettingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket': typeof UserNewticketIndexRoute
  '/user/setting': typeof UserSettingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket/': typeof UserNewticketIndexRoute
  '/user/setting/': typeof UserSettingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket'
    | '/user/setting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket'
    | '/user/setting'
  id:
    | '__root__'
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket/'
    | '/user/setting/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotLoginRoute: typeof NotLoginRoute
  StaffRoute: typeof StaffRouteWithChildren
  UserRoute: typeof UserRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notLogin': {
      id: '/notLogin'
      path: '/notLogin'
      fullPath: '/notLogin'
      preLoaderRoute: typeof NotLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/staff': {
      id: '/staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/staff/dashboard': {
      id: '/staff/dashboard'
      path: '/dashboard'
      fullPath: '/staff/dashboard'
      preLoaderRoute: typeof StaffDashboardRouteImport
      parentRoute: typeof StaffRoute
    }
    '/staff/tickets/$id': {
      id: '/staff/tickets/$id'
      path: '/tickets/$id'
      fullPath: '/staff/tickets/$id'
      preLoaderRoute: typeof StaffTicketsIdRouteImport
      parentRoute: typeof StaffRoute
    }
    '/staff/tickets/all': {
      id: '/staff/tickets/all'
      path: '/tickets/all'
      fullPath: '/staff/tickets/all'
      preLoaderRoute: typeof StaffTicketsAllRouteImport
      parentRoute: typeof StaffRoute
    }
    '/staff/tickets/list': {
      id: '/staff/tickets/list'
      path: '/tickets/list'
      fullPath: '/staff/tickets/list'
      preLoaderRoute: typeof StaffTicketsListRouteImport
      parentRoute: typeof StaffRoute
    }
    '/user/tickets/$id': {
      id: '/user/tickets/$id'
      path: '/tickets/$id'
      fullPath: '/user/tickets/$id'
      preLoaderRoute: typeof UserTicketsIdRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/tickets/list': {
      id: '/user/tickets/list'
      path: '/tickets/list'
      fullPath: '/user/tickets/list'
      preLoaderRoute: typeof UserTicketsListRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/newticket/': {
      id: '/user/newticket/'
      path: '/newticket'
      fullPath: '/user/newticket'
      preLoaderRoute: typeof UserNewticketIndexRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/setting/': {
      id: '/user/setting/'
      path: '/setting'
      fullPath: '/user/setting'
      preLoaderRoute: typeof UserSettingIndexRouteImport
      parentRoute: typeof UserRoute
    }
  }
}

interface StaffRouteChildren {
  StaffDashboardRoute: typeof StaffDashboardRoute
  StaffTicketsIdRoute: typeof StaffTicketsIdRoute
  StaffTicketsAllRoute: typeof StaffTicketsAllRoute
  StaffTicketsListRoute: typeof StaffTicketsListRoute
}

const StaffRouteChildren: StaffRouteChildren = {
  StaffDashboardRoute: StaffDashboardRoute,
  StaffTicketsIdRoute: StaffTicketsIdRoute,
  StaffTicketsAllRoute: StaffTicketsAllRoute,
  StaffTicketsListRoute: StaffTicketsListRoute,
}

const StaffRouteWithChildren = StaffRoute._addFileChildren(StaffRouteChildren)

interface UserRouteChildren {
  UserTicketsIdRoute: typeof UserTicketsIdRoute
  UserTicketsListRoute: typeof UserTicketsListRoute
  UserNewticketIndexRoute: typeof UserNewticketIndexRoute
  UserSettingIndexRoute: typeof UserSettingIndexRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserTicketsIdRoute: UserTicketsIdRoute,
  UserTicketsListRoute: UserTicketsListRoute,
  UserNewticketIndexRoute: UserNewticketIndexRoute,
  UserSettingIndexRoute: UserSettingIndexRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotLoginRoute: NotLoginRoute,
  StaffRoute: StaffRouteWithChildren,
  UserRoute: UserRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
